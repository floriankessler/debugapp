# $prefix defaults to '/usr/local/openresty/nginx/'
lua_package_path "$prefix/lua/?.lua;;";

# turn on in production
lua_code_cache off;

init_by_lua_block {
  local f = io.popen (
    "sh /usr/local/bin/systeminfo"
  );
  local systeminfo = f:read("*a") or "";
  f:close();
  mySysteminfo = string.gsub(systeminfo, "\n$", "");
}

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" '
                  #'"$http_x_forwarded_proto" "$original_scheme" '
                  ;

# We rely on proxies in front of our app, to tell as the scheme the end user
# used to call our app via the HTTP header 'x-forwarded-proto'.
#
# Locally, for development, we don't run a proxy in front of our openresty.
# For that case -and should the header be missing-, we take the contents of
# '$http_x_forwarded_proto' and set the value of '$original_scheme' to the
# value of '$http_x_forwarded_proto' in case '$http_x_forwarded_proto' matches
# either http or https.
# In case '$http_x_forwarded_proto' is missing we fall back to '$scheme'

map $http_x_forwarded_proto $original_scheme {
  http $http_x_forwarded_proto;
  https $http_x_forwarded_proto;
  '' $scheme;
}

server {
  listen       80;
  server_name  localhost;

  resolver 127.0.0.11 ipv6=off;

  access_log  /dev/stdout main;
  error_log  /dev/stdout;

  auth_basic_user_file /etc/openresty/conf.d/default.htpasswd;

  root  /opt/openresty/wwwroot;

  location = / {
    return 301 $original_scheme://$host/stackadm/debug/headers;
  }

  #location / {

    #try_files   $uri $uri/index.html = 404;
    #expires     1h;

  #}

  location /nginx_status {

    auth_basic off;
    types { }
    default_type "application/json";
    return 200 '{"status":200,"message":"OK"}';

  }

  location /stackadm/debug/systeminfo {

    auth_basic off;
    default_type text/plain;
    content_by_lua_block {
      -- inside lua we need lua specific comments
      --
      -- 'os.getenv' does not fetch vars from the env, but re-uses vars already
      -- declared by nginx at startup via:
      --
      --   env APPSETTING_WEBSITE_SITE_NAME;
      --
      --ngx.say("APPSETTING_WEBSITE_SITE_NAME=" .. os.getenv("APPSETTING_WEBSITE_SITE_NAME"))

      ngx.say("HTTP_HEADER_HOST=", ngx.var.host)
      ngx.say(mySysteminfo)
    }

  }

  # further examples on how to call lua code
  #location /helloworld {
    #default_type text/html;
    #content_by_lua '
    #ngx.say("<p>hello, world</p>")
    #';
  #}

  #location /helloworld2 {
    #default_type text/html;
    #content_by_lua_block {
      #require("star-cooperation_com").go()
    #}
  #}

  location /stackadm/debug/headers {
    default_type text/html;
    content_by_lua_file /usr/local/openresty/nginx/lua/showHeaders/main.lua;
  }

  location /stackadm/debug/headersJson {
    content_by_lua_file /usr/local/openresty/nginx/lua/showHeadersJson/main.lua;
  }

  location ~ ^/stackadm/debug/ttyd(.*)$ {

    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $original_scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://127.0.0.1:8081/$1;

    auth_basic "closed site";

  }

  #location / {

    #proxy_http_version 1.1;
    #proxy_set_header Host $host;
    #proxy_set_header X-Forwarded-Proto $original_scheme;
    #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header Upgrade $http_upgrade;
    #proxy_set_header Connection "upgrade";
    #proxy_pass http://tomcat-$original_scheme;

    ##set $session_secret retherth25t36VsCD3g567922IC0073T;

    ##access_by_lua_block {

    ##local openidc = require("resty.openidc")
    ##openidc.set_logging(nil, { DEBUG = ngx.INFO })

      ##local opts = {
        ##redirect_uri = "http://localhost:8081/redirect_uri",
        ##discovery = "http://app.docker.localhost/auth/realms/demo/.well-known/openid-configuration",
        ##client_id = "openresty",
        ##client_secret = "34f50bc3-7bc8-406a-ae0d-63225b384afa",
        ##scope = "openid email",
        ##access_token_expires_leeway = 30,
        ##accept_none_alg = false,
        ##accept_unsupported_alg = false,
        ##renew_access_token_on_expiry = true,
        ##session_contents = {access_token=true, id_token=true}
      ##}

      ##local openidc = require("resty.openidc")
      ##openidc.set_logging(nil, { DEBUG = ngx.INFO })

      ##local res, err = require("resty.openidc").authenticate(opts)

      ##if err then
        ##ngx.status = 500
        ##ngx.say(err)
        ##ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      ##end

    ##}

    ###content_by_lua_block {
      ###ngx.say("Ole");
    ###}

    ##try_files   $uri $uri/index.html = 404;
    ##expires     1h;

    #location /ext-assets {

      #try_files   $uri $uri/index.html = 404;

    #}

  #}


  # Return error json instead of error pages
  error_page 500 /500.html;
  location /500.html {
    types { }
    default_type "application/json";
    return 500 '{"status":500,"message":"Internal Server Error"}';
  }

  error_page 502 /502.html;
  location /502.html {
    types { }
    default_type "application/json";
    return 502 '{"status":502,"message":"Bad Gateway"}';
  }

  error_page 503 /503.html;
  location /503.html {
    types { }
    default_type "application/json";
    return 503 '{"status":503,"message":"Service Temporarily Unavailable"}';
  }

  error_page 504 /504.html;
  location /504.html {
    types { }
    default_type "application/json";
    return 504 '{"status":504,"message":"Gateway Timeout"}';
  }

  error_page 400 /400.html;
  location /400.html {
    types { }
    default_type "application/json";
    return 400 '{"status":400,"message":"Bad Request"}';
  }

  error_page 401 /401.html;
  location /401.html {
    types { }
    default_type "application/json";
    return 401 '{"status":401,"message":"Unauthorized"}';
  }

  error_page 403 /403.html;
  location /403.html {
    types { }
    default_type "application/json";
    return 403 '{"status":403,"message":"Forbidden"}';
  }

  error_page 404 /404.html;
  location /404.html {
    types { }
    default_type "application/json";
    return 404 '{"status":404,"message":"Not Found"}';
  }

  error_page 408 /408.html;
  location /408.html {
    types { }
    default_type "application/json";
    return 408 '{"status":408,"message":"Request Timeout}';
  }

  error_page 418 /418.html;
  location /418.html {
    types { }
    default_type "application/json";
    return 418 '{"status":418,"message":"I\'m a teapot"}';
  }
}
